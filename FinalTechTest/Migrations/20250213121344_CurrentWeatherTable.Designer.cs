// <auto-generated />
using System;
using FinalTechTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinalTechTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250213121344_CurrentWeatherTable")]
    partial class CurrentWeatherTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinalTechTest.Models.CurrentWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CloudCover")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<double>("FeelsLike")
                        .HasColumnType("double precision");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<int>("Pressure")
                        .HasColumnType("integer");

                    b.Property<long>("Sunrise")
                        .HasColumnType("bigint");

                    b.Property<long>("Sunset")
                        .HasColumnType("bigint");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<double>("UvIndex")
                        .HasColumnType("double precision");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.Property<string>("Weather")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("integer");

                    b.Property<double>("WindDeg")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindGust")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId")
                        .IsUnique();

                    b.ToTable("CurrentWeather");
                });

            modelBuilder.Entity("FinalTechTest.Models.DailyForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DateTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<double>("MaxTemp")
                        .HasColumnType("double precision");

                    b.Property<double>("MinTemp")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rain")
                        .HasColumnType("double precision");

                    b.Property<double>("UvIndex")
                        .HasColumnType("double precision");

                    b.Property<int>("WeatherForecastId")
                        .HasColumnType("integer");

                    b.Property<double>("WindDeg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("DailyForecasts");
                });

            modelBuilder.Entity("FinalTechTest.Models.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("FinalTechTest.Models.CurrentWeather", b =>
                {
                    b.HasOne("FinalTechTest.Models.WeatherForecast", "WeatherForecast")
                        .WithOne("CurrentWeather")
                        .HasForeignKey("FinalTechTest.Models.CurrentWeather", "WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("FinalTechTest.Models.DailyForecast", b =>
                {
                    b.HasOne("FinalTechTest.Models.WeatherForecast", "WeatherForecast")
                        .WithMany("DailyForecasts")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherForecast");
                });

            modelBuilder.Entity("FinalTechTest.Models.WeatherForecast", b =>
                {
                    b.Navigation("CurrentWeather")
                        .IsRequired();

                    b.Navigation("DailyForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
