@page "/"
@rendermode InteractiveServer
@using FinalTechTest.Services
@using FinalTechTest.Components.Resuable
@using Blazor.Heroicons.Outline

<div class="from-picton-blue-500 min-h-screen w-full bg-gradient-to-br to-white bg-no-repeat p-4 bg-[length:200%_200%] bg-[position:60%_40%]">
	<div class="flex flex-wrap">


		<nav class="mb-4 mr-4 h-full w-64 rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
			<div class="p-4">
				<h2 class="font-poppins text-xl font-bold text-gray-800">Locations</h2>
			</div>
			<ul class="mt-4">
				@foreach (var location in _locations)
				{
					<li class="border-b border-gray-200">
						<a href="#" class="font-poppins block px-4 py-2 text-gray-700 hover:bg-blue-100"
						@onclick="() => LocationService.SetLocation(location.Latitude, location.Longitude, location.Name, _typeSting)">
							@location.Name
						</a>
					</li>
				}
			</ul>
		</nav>

		<div class="mb-4 mr-4">

			<!-- Stats Cards -->
			<div class="grid-cols-1 grid gap-4 md:grid-cols-2 lg:grid-cols-4">
				<div class="w-60 rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">Total Views</h2>
					<p class="font-poppins text-3xl font-bold">15,102</p>
					<p class="font-poppins text-sm text-green-500">23% increase</p>
				</div>
				<div class="rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">Paid Visits</h2>
					<p class="font-poppins text-3xl font-bold">4,581</p>
					<p class="font-poppins text-sm text-red-500">24% decrease</p>
				</div>
				<div class="rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">Total Referral</h2>
					<p class="font-poppins text-3xl font-bold">2,140</p>
					<p class="font-poppins text-sm text-red-500">10% decrease</p>
				</div>
				<div class="rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">This Week</h2>
					<p class="font-poppins text-3xl font-bold">7,714</p>
					<p class="font-poppins text-sm text-green-500">82% increase</p>
				</div>
			</div>

			<!-- Charts and Insights -->
			<div class="grid-cols-1 mt-4 grid gap-4 md:grid-cols-2 lg:grid-cols-3">
				<!-- Total Revenue -->
				<div class="col-span-2 rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">Total Revenue</h2>
					<div class="mt-4 h-40 rounded bg-gray-200">Chart Placeholder</div>
				</div>

				<!-- Top Traffic By Source -->
				<div class="rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">Top Traffic By Source</h2>
					<ul class="mt-4">
						<li class="mb-2 flex justify-between">
							<span>Chrome</span>
							<span class="font-poppins font-bold">56%</span>
						</li>
						<li class="mb-2 flex justify-between">
							<span>Safari</span>
							<span class="font-poppins font-bold">86%</span>
						</li>
						<li class="mb-2 flex justify-between">
							<span>Firefox</span>
							<span class="font-poppins font-bold">65%</span>
						</li>
						<li class="flex justify-between">
							<span>Edge</span>
							<span class="font-poppins font-bold">40%</span>
						</li>
					</ul>
				</div>

				<!-- Users By Device -->
				<div class="rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
					<h2 class="font-poppins text-gray-600">Users By Device</h2>
					<div class="mt-4 h-40 rounded bg-gray-200">Chart Placeholder</div>
				</div>
			</div>
		</div>


		<div class="mb-4 mr-4 h-full rounded-lg bg-white p-4 shadow-lg transition-shadow duration-100 hover:shadow-xl">
			<Map />
			<div class="flex flex-row gap-2">
				@if (!isDisabledAdd)
				{
					<button class="border-2 mt-4 flex h-8 w-48 items-center justify-center rounded-lg bg-white shadow-md transition-shadow duration-100 hover:shadow-lg" @onclick="AddLocation" disabled="@isDisabledAdd">
						<PlusIcon class="font-bo h-6 w-6 text-gray-800" />
						<p class="font-poppins text-lg font-semibold text-gray-800">Add Location </p>
					</button>
				}
			</div>

			@if (showAddLocationCard)
			{

				<div class="border-2 mt-4 w-full transform rounded-lg bg-white p-6">
					<h4 class="mb-4 text-lg font-semibold">Add New Location</h4>

					<label class="block text-sm font-medium text-gray-700">Location Name:</label>
					<input type="text" value="@newMarkerName" @oninput="UpdateMarkerName"
					class="mt-1 block w-full rounded-md border border-gray-300 p-2 shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />

					<label class="mt-3 block text-sm font-medium text-gray-700">Latitude:</label>
					<input type="text" value="@newMarkerLatitude" @oninput="UpdateMarkerLat"
					class="mt-1 block w-full rounded-md border border-gray-300 p-2 shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />

					<label class="mt-3 block text-sm font-medium text-gray-700">Longitude:</label>
					<input type="text" value="@newMarkerLongitude" @oninput="UpdateMarkerLng"
					class="mt-1 block w-full rounded-md border border-gray-300 p-2 shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />


					<div class="mt-4 flex justify-between">
						<button @onclick="ConfirmLocation"
						class="bg-picton-blue-500 rounded-lg px-4 py-2 text-white shadow hover:bg-blue-600">
							Confirm
						</button>

						<button @onclick="CancelLocation"
						class="rounded-lg bg-gray-300 px-4 py-2 text-gray-700 shadow hover:bg-gray-400">
							Cancel
						</button>
					</div>
				</div>


			}
		</div>

	</div>
</div>



@code {
	@inject WeatherService WeatherService
	@inject LocationService LocationService

	private WeatherForecastDto? weatherData;

	private bool isDisabledAdd = false;

	private bool showAddLocationCard = false;
	private string newMarkerName = "";
	private string newMarkerLatitude = "";
	private string newMarkerLongitude = "";
	private bool isValidCoordinates = true;
	private string _typeSting = "input";
	private List<LocationDto> _locations = new List<LocationDto>();

	protected override async Task OnInitializedAsync()
	{
		LocationService.OnLocationChangedfromMapAction += StateHasChanged; //Location has changed by clicking a new marker
		LocationService.UpdateMarkerFromMapAction += UpdateMarkerFromMap; //Marker is moved when adding 
		await UpdateLocations();
	}




	public void Dispose()
	{
		LocationService.OnLocationChangedfromMapAction -= StateHasChanged;
		LocationService.UpdateMarkerFromMapAction += UpdateMarkerFromMap;
	}


	#region MapFunctions
	private void AddLocation()
	{
		isDisabledAdd = true;
		showAddLocationCard = true;

		LocationService.RequestAddMarker(); // Notify LeafletMap to add a marker

	}

	private async Task ConfirmLocation()
	{
		if (LocationService.LockMarkerAndAddPopupAction != null)
		{
			await LocationService.LockMarkerAndAddPopupAction(); // ✅ Now correctly awaited
		}
		showAddLocationCard = false;
		isDisabledAdd = false;
		// Save to DB or perform an action

		StateHasChanged();
		weatherData = await WeatherService.GetWeatherAsync(LocationService.Name, LocationService.Latitude, LocationService.Longitude);
		await UpdateLocations();
	}

	private void CancelLocation()
	{	
		LocationService.RemoveMarker();
		showAddLocationCard = false;
		isDisabledAdd = false;
	}

	private void UpdateMarkerName(ChangeEventArgs e)
	{
		newMarkerName = e.Value.ToString();
		LocationService.MarkerName = newMarkerName;
	}


	private void UpdateMarkerLat(ChangeEventArgs e)
	{
		// Try converting input to double
		newMarkerLatitude = e.Value.ToString();
		if (newMarkerLatitude != null)
		{

			isValidCoordinates = TryParseCoordinates(newMarkerLatitude, newMarkerLongitude, out double lat, out double lng);

			if (isValidCoordinates)
			{
				LocationService.UpdateMarkerfromInput(lat, lng);
			}
		}
	}

	private void UpdateMarkerLng(ChangeEventArgs e)
	{
		// Try converting input to double
		newMarkerLongitude = e.Value.ToString();
		if (newMarkerLongitude != null)
		{
			isValidCoordinates = TryParseCoordinates(newMarkerLatitude, newMarkerLongitude, out double lat, out double lng);

			if (isValidCoordinates)
			{
				LocationService.UpdateMarkerfromInput(lat, lng);
			}
		}
	}

	//user has moved the draggable marker when adding
	private void UpdateMarkerFromMap()
	{
		newMarkerLatitude = LocationService.MarkerLatitude.ToString();
		newMarkerLongitude = LocationService.MarkerLongitude.ToString();
		StateHasChanged();
	}

	#endregion


	#region Helpers

	private bool TryParseCoordinates(string latInput, string lngInput, out double lat, out double lng)


	{
		bool isLatValid = double.TryParse(latInput, out lat) && lat is >= -90 and <= 90;
		bool isLngValid = double.TryParse(lngInput, out lng) && lng is >= -180 and <= 180;

		return isLatValid && isLngValid;
	}

	private async Task UpdateLocations()
	{
		_locations = await WeatherService.GetAllLocationsAsync();
	}
	#endregion
}
