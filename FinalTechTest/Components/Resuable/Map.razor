@inject IJSRuntime JS
@using FinalTechTest.Services

<div id="map" style="width: 500px; height: 500px; margin: auto;"></div>

@code {
	@inject WeatherService WeatherService
	@inject LocationService LocationService

	protected override void OnInitialized()
	{
		LocationService.OnAddMarkerRequestedAction += HandleAddMarkerRequest; //adds new marker to the map
		LocationService.UpdateMarkerFromInputAction += UpdateMarkerFromInput; //updates marker position from input fields
		LocationService.LockMarkerAndAddPopupAction = LockMarkerAndAddPopup; //locks the marker in place when location is confirmed
		LocationService.RemoveMarkerAction += RemoveMarker; //Removes marker when user cancels editing
		LocationService.OnLocationChangedFromInputAction += OpenLocationPopup; //Opens a popup when new location is selected
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender)
		{
			var locations = await WeatherService.GetAllLocationsAsync();
			// Convert list to JSON and pass to JS function
			await JS.InvokeVoidAsync("initMapWithMarkers", "map", locations, DotNetObjectReference.Create(this));
		}
	}

	//user clicks a marker
	[JSInvokable]
	public void UpdateSelectedMarker(double lat, double lng, string name) 
	{
		LocationService.SetLocation(lat, lng, name, "map");
		StateHasChanged(); // Refresh UI
	}

	//adds a marker to the map
	private async void HandleAddMarkerRequest()
	{
		await JS.InvokeVoidAsync("addDraggableMarker", "map", DotNetObjectReference.Create(this));
		StateHasChanged(); // Refresh UI
	}

	//Change marker position from input fields
	private async void UpdateMarkerFromInput()
	{
		var newLat = LocationService.MarkerLatitude;
		var newlng = LocationService.MarkerLongitude;
		await JS.InvokeVoidAsync("updateMarkerPosition", "map", newLat, newlng);
		StateHasChanged(); // Refresh UI
	}

	//Lock marker in place after confirm
	private async Task LockMarkerAndAddPopup()
	{
		var newName = LocationService.MarkerName;
		var newLat = LocationService.MarkerLatitude;
		var newlng = LocationService.MarkerLongitude;
		await JS.InvokeVoidAsync("lockMarkerAndAddPopup", "map", newName, newLat, newlng, DotNetObjectReference.Create(this));
		StateHasChanged(); // Refresh UI
	}

	[JSInvokable]
	public void UpdateNewMarkerPosition(double lat, double lng)
	{
		LocationService.UpdateMarkerfromMap(Math.Round(lat,4), Math.Round(lng,4));
	}

	private async void RemoveMarker()
	{
		await JS.InvokeVoidAsync("removeMarker");
		StateHasChanged(); // Refresh UI
	}

	private void OpenLocationPopup()
	{
		var locationName = LocationService.Name;

		// Call JavaScript function to open the marker popup
        JS.InvokeVoidAsync("openMarkerPopup", locationName);
    }


}